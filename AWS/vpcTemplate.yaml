AWSTemplateFormatVersion: "2010-09-09"
Description: VPC BlogTemplate
Resources:
  VPCBlog:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC-Blog
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCBlog
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCBlog
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGatewayBlog
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCBlog
      InternetGatewayId: !Ref InternetGateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBlog
      Tags:
        - Key: Name
          Value: RouteTablePublic
  GatewayToPublicSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublic
  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SecurityGroupBlog:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Blog EC2 instances
      VpcId: !Ref VPCBlog
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Blog-SG

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion host
      VpcId: !Ref VPCBlog
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  BlogEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c101f26f147fa7fd
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroupBlog
      IamInstanceProfile: !Ref BlogEC2InstanceProfile
      Tags:
        - Key: Name
          Value: BlogEC2Instance
  BastionHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c101f26f147fa7fd
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      KeyName: BlogKeyPair
      Tags:
        - Key: Name
          Value: BastionHost
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBlog
      Tags:
        - Key: Name
          Value: RouteTablePrivate
  PrivateGatewayToSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  BlogImageS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub blog-images-bucket-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      Tags:
        - Key: Name
          Value: BlogImagesBucket
  BlogEC2Role:
    "Type": "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Tags:
        - Key: Name
          Value: BlogEC2Role

  BlogS3AccessPoicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BlogS3AccessPolicy
      Roles:
        - !Ref BlogEC2Role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::blog-images-bucket-${AWS::AccountId}-${AWS::Region}/*"
  BlogEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BlogEC2Role
Outputs:
  VpcId:
    Description: The ID of the created VPC
    Value: !Ref VPCBlog
    Export:
      Name: VPC-Blog-VpcId
# Parameters:
#   MyIP:
#     Type: String
#     Description: Enter your IP address with /32
